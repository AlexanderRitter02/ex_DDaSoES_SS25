$date
    May 18, 2025  15:20:35
$end
$comment
	SimVision SST: d37fa0eb34ee6115b71f12b7fe0b461f
$end
$version
    TOOL:	xmsim(64)	22.09-s007
$end
$timescale
    1 fs
$end

$scope module cbc_testbench $end
$var reg       1 !    enc_dec_8bit $end
$var reg       8 "    key_8bit [7:0] $end
$var reg       8 #    message_len1_8bit [7:0] $end
$var reg       8 $    output_cbc_8bit [7:0] $end
$var reg       8 %    output_xor_8bit [7:0] $end
$var reg       1 &    enc_dec_len2 $end
$var reg      16 '    message_len2 [15:0] $end
$var reg      16 (    output_len2 [15:0] $end
$var reg       1 )    enc_dec_complex $end
$var reg      64 *    key_16bit [63:0] $end
$var reg      64 +    message_len4 [63:0] $end
$var reg      64 ,    output_len4 [63:0] $end

$scope module encrypter_1chunk_8bit $end
$var parameter 32 -    n $end
$var parameter 32 .    m $end
$var wire      1 /    enc_dec  $end
$var wire      8 0    message [7:0] $end
$var wire      8 1    key [7:0] $end
$var reg       8 2    out [7:0] $end

$scope begin genblk1 $end

$scope module chunk_first $end
$var parameter 32 3    n $end
$var wire      8 0    chunk [7:0] $end
$var wire      8 1    key [7:0] $end
$var reg       8 4    out [7:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module xor_8bit $end
$var parameter 32 5    n $end
$var wire      8 6    chunk [7:0] $end
$var wire      8 7    key [7:0] $end
$var reg       8 8    out [7:0] $end
$upscope $end


$scope module encrypter_2chunk_8bit $end
$var parameter 32 9    n $end
$var parameter 32 :    m $end
$var wire      1 ;    enc_dec  $end
$var wire     16 <    message [15:0] $end
$var wire      8 =    key [7:0] $end
$var reg      16 >    out [15:0] $end

$scope begin genblk1 $end

$scope module chunk_first $end
$var parameter 32 ?    n $end
$var wire      8 @    chunk [7:0] $end
$var wire      8 =    key [7:0] $end
$var reg       8 A    out [7:0] $end
$upscope $end

$upscope $end


$scope begin gen_chunk_xors[1] $end
$var parameter 32 B    chunk $end
$var reg       8 C    current_key [7:0] $end

$scope module chunk_after $end
$var parameter 32 D    n $end
$var wire      8 E    chunk [7:0] $end
$var wire      8 F    key [7:0] $end
$var reg       8 G    out [7:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module encrypter_5chunk_16bit $end
$var parameter 32 H    n $end
$var parameter 32 I    m $end
$var wire      1 J    enc_dec  $end
$var wire     64 K    message [63:0] $end
$var wire     16 L    key [15:0] $end
$var reg      64 M    out [63:0] $end

$scope begin genblk1 $end

$scope module chunk_first $end
$var parameter 32 N    n $end
$var wire     16 O    chunk [15:0] $end
$var wire     16 L    key [15:0] $end
$var reg      16 P    out [15:0] $end
$upscope $end

$upscope $end


$scope begin gen_chunk_xors[1] $end
$var parameter 32 Q    chunk $end
$var reg      16 R    current_key [15:0] $end

$scope module chunk_after $end
$var parameter 32 S    n $end
$var wire     16 T    chunk [15:0] $end
$var wire     16 U    key [15:0] $end
$var reg      16 V    out [15:0] $end
$upscope $end

$upscope $end


$scope begin gen_chunk_xors[2] $end
$var parameter 32 W    chunk $end
$var reg      16 X    current_key [15:0] $end

$scope module chunk_after $end
$var parameter 32 Y    n $end
$var wire     16 Z    chunk [15:0] $end
$var wire     16 [    key [15:0] $end
$var reg      16 \    out [15:0] $end
$upscope $end

$upscope $end


$scope begin gen_chunk_xors[3] $end
$var parameter 32 ]    chunk $end
$var reg      16 ^    current_key [15:0] $end

$scope module chunk_after $end
$var parameter 32 _    n $end
$var wire     16 `    chunk [15:0] $end
$var wire     16 a    key [15:0] $end
$var reg      16 b    out [15:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b10 _
b11 ]
b10 Y
b10 W
b10 S
b1 Q
b10 N
b100 I
b10 H
b1 D
b1 B
b1 ?
b10 :
b1 9
b1 5
b1 3
b1 .
b1 -
0!
b11100111 "
b10111 #
b11110000 $
b11110000 %
x&
bx '
bx (
x)
bx *
bx +
bx ,
0/
b10111 0
b11100111 1
b11110000 2
b11110000 4
b10111 6
b11100111 7
b11110000 8
x;
bx <
b11100111 =
bx >
bx @
bx A
bx C
bx E
bx F
bx G
xJ
bx K
bx L
bx M
bx O
bx P
bx R
bx T
bx U
bx V
bx X
bx Z
bx [
bx \
bx ^
bx `
bx a
bx b
$end
#1000
b11111111 #
b11111111 6
b11111111 0
b11000 8
b11000 4
b11000 2
b11000 %
b11000 $
#2000
0&
b0 '
b0 <
0;
b0 @
b0 E
b11100111 A
bx11100111 >
b11100111 C
b11100111 F
b11100111 G
bx11100111 (
b1110011111100111 >
b1110011111100111 (
#3000
b1001101001110011 '
b1011001 "
b1011001 =
b1011001 7
b1011001 1
b1001101001110011 <
b1011001 A
b10100110 8
b10100110 4
b1110011 @
b10011010 E
b101010 A
b1111101 G
b10100110 2
b10100110 %
b1110011101011001 >
b1011001 C
b1011001 F
b11000011 G
b1110011101011001 (
b10100110 $
b111110101011001 >
b111110100101010 >
b101010 C
b101010 F
b10110000 G
b111110100101010 (
b1100001100101010 >
b1100001100101010 (
b1011000000101010 >
b1011000000101010 (
#4000
0)
b101011111011 *
b1000101111001101101000100101100100010001001000111111111101010100 +
b1000101111001101101000100101100100010001001000111111111101010100 K
b101011111011 L
0J
b1111111101010100 O
b1000101111001101 `
b1010001001011001 Z
b1000100100011 T
b1111010110101111 P
bx1111010110101111 M
b1111010110101111 R
b1111010110101111 U
b1110010010001100 V
bx1111010110101111 ,
bx11100100100011001111010110101111 M
b1110010010001100 X
b1110010010001100 [
b100011011010101 \
bx11100100100011001111010110101111 ,
bx010001101101010111100100100011001111010110101111 M
b100011011010101 ^
b100011011010101 a
b1100110100011000 b
bx010001101101010111100100100011001111010110101111 ,
b1100110100011000010001101101010111100100100011001111010110101111 M
b1100110100011000010001101101010111100100100011001111010110101111 ,
#5000
b1001000110100 *
b100100011010001010110011110001001101010111100110111101111 +
b100100011010001010110011110001001101010111100110111101111 K
b1001000110100 L
b1110110101100000 P
b1100110111101111 O
b100100011 `
b100010101100111 Z
b1000100110101011 T
b1100110100011000010001101101010111100100100011001110110101100000 M
b1101111111011011 P
b100011111110110 b
b1010000111101011 \
b111110000000100 V
b1110110101100000 R
b1110110101100000 U
b110010011001011 V
b1100110100011000010001101101010101111100000001001110110101100000 M
b1100110100011000101000011110101101111100000001001110110101100000 M
b100011111110110101000011110101101111100000001001110110101100000 M
b100011111110110101000011110101101111100000001001101111111011011 M
b1100110100011000010001101101010111100100100011001110110101100000 ,
b1101111111011011 R
b111110000000100 X
b1010000111101011 ^
b1010000111101011 a
b111110000000100 [
b1101111111011011 U
b1010000011001000 b
b11100101100011 \
b101011001110000 V
b100011111110110101000011110101101111100000001001101111111011011 ,
b100011111110110101000011110101101100100110010111101111111011011 M
b110010011001011 X
b110010011001011 [
b10000110101100 \
b100011111110110101000011110101101100100110010111101111111011011 ,
b100011111110110101000011110101101010110011100001101111111011011 M
b100011111110110001110010110001101010110011100001101111111011011 M
b1010000011001000001110010110001101010110011100001101111111011011 M
b101011001110000 X
b11100101100011 ^
b11100101100011 a
b101011001110000 [
b11100001000000 b
b1001100010111 \
b1010000011001000001110010110001101010110011100001101111111011011 ,
b1010000011001000001000011010110001010110011100001101111111011011 M
b10000110101100 ^
b10000110101100 a
b10000010001111 b
b1010000011001000001000011010110001010110011100001101111111011011 ,
b1010000011001000000100110001011101010110011100001101111111011011 M
b11100001000000000100110001011101010110011100001101111111011011 M
b1001100010111 ^
b1001100010111 a
b1001000110100 b
b11100001000000000100110001011101010110011100001101111111011011 ,
b10000010001111000100110001011101010110011100001101111111011011 M
b10000010001111000100110001011101010110011100001101111111011011 ,
b1001000110100000100110001011101010110011100001101111111011011 M
b1001000110100000100110001011101010110011100001101111111011011 ,
#6000
1&
1)
b1110011111100111 '
b11100111 "
b11100111 =
b11100111 7
b11100111 1
b1110011111100111 <
1J
1;
b10010100 A
b11000 8
b11000 4
b11100111 C
b100010101100111 ^
b1000100110101011 X
b1100110111101111 R
b1100110111101111 U
b1000100110101011 [
b100010101100111 a
b11100111 F
b11100111 @
b11100111 E
b100010001000100 V
b1100110011001100 \
b100010001000100 b
b0 G
b0 A
b11000 2
b11000 %
b1011000010010100 >
b1011000010010100 (
b11000 $
b1011000000000000 >
b0 >
b100010001000100000100110001011101010110011100001101111111011011 M
b100010001000100110011001100110001010110011100001101111111011011 M
b100010001000100110011001100110001000100010001001101111111011011 M
b100010001000100110011001100110001000100010001001101111111011011 ,
b0 (
#7000
b1011000000101010 '
b1011001 "
b1011001 =
b1011001 7
b1011001 1
b1011000000101010 <
b10111110 A
b10100110 8
b10100110 4
b101010 C
b101010 F
b101010 @
b10110000 E
b10011010 G
b1110011 A
b10100110 2
b10100110 %
b10111110 >
b10111110 (
b10100110 $
b1110011 >
b1001101001110011 >
b1001101001110011 (
#8000
b1100110100011000010001101101010111100100100011001111010110101111 +
b101011111011 *
b101011111011 L
b1100110100011000010001101101010111100100100011001111010110101111 K
b1100011100010100 P
b100011011010101 ^
b1110010010001100 X
b1111010110101111 R
b1111010110101111 U
b1110010010001100 [
b100011011010101 a
b1111010110101111 O
b1100110100011000 `
b100011011010101 Z
b1110010010001100 T
b1000100100011 V
b1010001001011001 \
b1000101111001101 b
b1111111101010100 P
b100010001000100110011001100110001000100010001001100011100010100 M
b100010001000100110011001100110001000100010001001100011100010100 ,
b100010001000100110011001100110001000100010001001111111101010100 M
b1000101111001101110011001100110001000100010001001111111101010100 M
b1000101111001101101000100101100101000100010001001111111101010100 M
b1000101111001101101000100101100100010001001000111111111101010100 M
b1000101111001101101000100101100100010001001000111111111101010100 ,
#9000
b1001000110100000100110001011101010110011100001101111111011011 +
b1001000110100 *
b1001000110100 L
b1001000110100000100110001011101010110011100001101111111011011 K
b1110011110011011 P
b1001100010111 ^
b101011001110000 X
b1101111111011011 R
b1101111111011011 U
b101011001110000 [
b1001100010111 a
b1101111111011011 O
b1001000110100 `
b1001100010111 Z
b101011001110000 T
b1000100110101011 V
b100010101100111 \
b100100011 b
b1100110111101111 P
b1000101111001101101000100101100100010001001000111110011110011011 M
b1000101111001101101000100101100100010001001000111110011110011011 ,
b1000101111001101101000100101100100010001001000111100110111101111 M
b100100011101000100101100100010001001000111100110111101111 M
b100100011010001010110011100010001001000111100110111101111 M
b100100011010001010110011110001001101010111100110111101111 M
b100100011010001010110011110001001101010111100110111101111 ,
#10000
