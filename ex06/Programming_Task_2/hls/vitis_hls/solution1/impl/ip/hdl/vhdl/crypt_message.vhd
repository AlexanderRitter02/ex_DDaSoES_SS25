-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypt_message is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    encrypt_decrypt : IN STD_LOGIC;
    message : IN STD_LOGIC_VECTOR (63 downto 0);
    key : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of crypt_message is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypt_message_crypt_message,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.168000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=112,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal chunk_V_fu_64_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_key_V_fu_74_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_fu_68_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_key_V_fu_74_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal chunk_V_1_fu_82_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_key_V_1_fu_98_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_1_fu_92_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_key_V_1_fu_98_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal chunk_V_2_fu_106_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_key_V_2_fu_122_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_2_fu_116_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_key_V_2_fu_122_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal chunk_V_3_fu_130_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_3_fu_140_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    ap_return <= (((ret_3_fu_140_p2 & ret_2_fu_116_p2) & ret_1_fu_92_p2) & ret_fu_68_p2);
    chunk_V_1_fu_82_p4 <= message(31 downto 16);
    chunk_V_2_fu_106_p4 <= message(47 downto 32);
    chunk_V_3_fu_130_p4 <= message(63 downto 48);
    chunk_V_fu_64_p1 <= message(16 - 1 downto 0);
    next_key_V_1_fu_98_p0 <= (0=>encrypt_decrypt, others=>'-');
    next_key_V_1_fu_98_p3 <= 
        chunk_V_1_fu_82_p4 when (next_key_V_1_fu_98_p0(0) = '1') else 
        ret_1_fu_92_p2;
    next_key_V_2_fu_122_p0 <= (0=>encrypt_decrypt, others=>'-');
    next_key_V_2_fu_122_p3 <= 
        chunk_V_2_fu_106_p4 when (next_key_V_2_fu_122_p0(0) = '1') else 
        ret_2_fu_116_p2;
    next_key_V_fu_74_p0 <= (0=>encrypt_decrypt, others=>'-');
    next_key_V_fu_74_p3 <= 
        chunk_V_fu_64_p1 when (next_key_V_fu_74_p0(0) = '1') else 
        ret_fu_68_p2;
    ret_1_fu_92_p2 <= (next_key_V_fu_74_p3 xor chunk_V_1_fu_82_p4);
    ret_2_fu_116_p2 <= (next_key_V_1_fu_98_p3 xor chunk_V_2_fu_106_p4);
    ret_3_fu_140_p2 <= (next_key_V_2_fu_122_p3 xor chunk_V_3_fu_130_p4);
    ret_fu_68_p2 <= (key xor chunk_V_fu_64_p1);
end behav;
