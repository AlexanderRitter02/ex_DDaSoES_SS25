// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypt_message_crypt_message,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.168000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=112,HLS_VERSION=2022_2}" *)

module crypt_message (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        encrypt_decrypt,
        message,
        key,
        ap_return
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   encrypt_decrypt;
input  [63:0] message;
input  [15:0] key;
output  [63:0] ap_return;

wire   [15:0] chunk_V_fu_64_p1;
wire   [0:0] next_key_V_fu_74_p0;
wire   [15:0] ret_fu_68_p2;
wire   [15:0] next_key_V_fu_74_p3;
wire   [15:0] chunk_V_1_fu_82_p4;
wire   [0:0] next_key_V_1_fu_98_p0;
wire   [15:0] ret_1_fu_92_p2;
wire   [15:0] next_key_V_1_fu_98_p3;
wire   [15:0] chunk_V_2_fu_106_p4;
wire   [0:0] next_key_V_2_fu_122_p0;
wire   [15:0] ret_2_fu_116_p2;
wire   [15:0] next_key_V_2_fu_122_p3;
wire   [15:0] chunk_V_3_fu_130_p4;
wire   [15:0] ret_3_fu_140_p2;
wire    ap_ce_reg;

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign ap_return = {{{{ret_3_fu_140_p2}, {ret_2_fu_116_p2}}, {ret_1_fu_92_p2}}, {ret_fu_68_p2}};

assign chunk_V_1_fu_82_p4 = {{message[31:16]}};

assign chunk_V_2_fu_106_p4 = {{message[47:32]}};

assign chunk_V_3_fu_130_p4 = {{message[63:48]}};

assign chunk_V_fu_64_p1 = message[15:0];

assign next_key_V_1_fu_98_p3 = ((next_key_V_1_fu_98_p0[0:0] == 1'b1) ? chunk_V_1_fu_82_p4 : ret_1_fu_92_p2);

assign next_key_V_2_fu_122_p3 = ((next_key_V_2_fu_122_p0[0:0] == 1'b1) ? chunk_V_2_fu_106_p4 : ret_2_fu_116_p2);

assign next_key_V_fu_74_p3 = ((next_key_V_fu_74_p0[0:0] == 1'b1) ? chunk_V_fu_64_p1 : ret_fu_68_p2);

assign ret_1_fu_92_p2 = (next_key_V_fu_74_p3 ^ chunk_V_1_fu_82_p4);

assign ret_2_fu_116_p2 = (next_key_V_1_fu_98_p3 ^ chunk_V_2_fu_106_p4);

assign ret_3_fu_140_p2 = (next_key_V_2_fu_122_p3 ^ chunk_V_3_fu_130_p4);

assign ret_fu_68_p2 = (key ^ chunk_V_fu_64_p1);

assign next_key_V_1_fu_98_p0 = encrypt_decrypt;

assign next_key_V_2_fu_122_p0 = encrypt_decrypt;

assign next_key_V_fu_74_p0 = encrypt_decrypt;

endmodule //crypt_message
