// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypt_message_crypt_message,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.785500,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=85,HLS_SYN_LUT=1654,HLS_VERSION=2022_2}" *)

module crypt_message (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        encrypt_decrypt,
        message,
        key,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   encrypt_decrypt;
input  [63:0] message;
input  [15:0] key;
output  [63:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln18_fu_112_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [15:0] rhs_V_fu_64;
wire   [15:0] next_key_V_fu_248_p3;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_rhs_V_load;
reg   [63:0] p_Val2_s_fu_68;
wire   [63:0] p_Result_1_fu_374_p2;
reg   [63:0] ap_sig_allocacmp_p_Val2_load_1;
reg   [63:0] ap_sig_allocacmp_p_Val2_load;
reg   [2:0] i_fu_72;
wire   [2:0] i_2_fu_118_p2;
reg   [2:0] ap_sig_allocacmp_i_1;
wire   [1:0] trunc_ln20_fu_130_p1;
wire   [5:0] shl_ln_fu_134_p3;
wire   [5:0] or_ln20_fu_142_p2;
wire   [0:0] icmp_ln628_fu_148_p2;
wire   [5:0] sub_ln628_fu_164_p2;
wire   [5:0] sub_ln628_1_fu_176_p2;
reg   [63:0] tmp_fu_154_p4;
wire   [5:0] xor_ln628_fu_170_p2;
wire   [5:0] select_ln628_fu_182_p3;
wire   [5:0] select_ln628_2_fu_198_p3;
wire   [5:0] xor_ln628_1_fu_206_p2;
wire   [63:0] select_ln628_1_fu_190_p3;
wire   [63:0] zext_ln628_fu_212_p1;
wire   [63:0] zext_ln628_1_fu_216_p1;
wire   [63:0] lshr_ln628_fu_220_p2;
wire   [63:0] lshr_ln628_1_fu_226_p2;
wire   [63:0] p_Result_s_fu_232_p2;
wire   [15:0] current_chunk_fu_238_p1;
wire   [0:0] next_key_V_fu_248_p0;
wire  signed [15:0] ret_fu_242_p2;
wire   [0:0] icmp_ln368_fu_260_p2;
wire   [5:0] xor_ln368_fu_266_p2;
wire   [5:0] select_ln368_fu_272_p3;
wire   [5:0] select_ln368_2_fu_288_p3;
wire   [5:0] select_ln368_1_fu_280_p3;
wire   [5:0] xor_ln368_1_fu_296_p2;
wire  signed [63:0] sext_ln186_fu_256_p1;
wire   [63:0] zext_ln368_fu_302_p1;
wire   [63:0] shl_ln368_fu_314_p2;
reg   [63:0] tmp_2_fu_320_p4;
wire   [63:0] zext_ln368_1_fu_306_p1;
wire   [63:0] zext_ln368_2_fu_310_p1;
wire   [63:0] shl_ln368_1_fu_338_p2;
wire   [63:0] lshr_ln368_fu_344_p2;
wire   [63:0] and_ln368_fu_350_p2;
wire   [63:0] xor_ln368_2_fu_356_p2;
wire   [63:0] select_ln368_3_fu_330_p3;
wire   [63:0] and_ln368_1_fu_362_p2;
wire   [63:0] and_ln368_2_fu_368_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crypt_message_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln18_fu_112_p2 == 1'd0)) begin
            i_fu_72 <= i_2_fu_118_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln18_fu_112_p2 == 1'd0)) begin
            p_Val2_s_fu_68 <= p_Result_1_fu_374_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            p_Val2_s_fu_68 <= 64'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln18_fu_112_p2 == 1'd0)) begin
            rhs_V_fu_64 <= next_key_V_fu_248_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            rhs_V_fu_64 <= key;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln18_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_72;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_Val2_load = 64'd0;
    end else begin
        ap_sig_allocacmp_p_Val2_load = p_Val2_s_fu_68;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_Val2_load_1 = 64'd0;
    end else begin
        ap_sig_allocacmp_p_Val2_load_1 = p_Val2_s_fu_68;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_rhs_V_load = key;
    end else begin
        ap_sig_allocacmp_rhs_V_load = rhs_V_fu_64;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln368_1_fu_362_p2 = (xor_ln368_2_fu_356_p2 & ap_sig_allocacmp_p_Val2_load_1);

assign and_ln368_2_fu_368_p2 = (select_ln368_3_fu_330_p3 & and_ln368_fu_350_p2);

assign and_ln368_fu_350_p2 = (shl_ln368_1_fu_338_p2 & lshr_ln368_fu_344_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_return = ap_sig_allocacmp_p_Val2_load;

assign current_chunk_fu_238_p1 = p_Result_s_fu_232_p2[15:0];

assign i_2_fu_118_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign icmp_ln18_fu_112_p2 = ((ap_sig_allocacmp_i_1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln368_fu_260_p2 = ((shl_ln_fu_134_p3 > or_ln20_fu_142_p2) ? 1'b1 : 1'b0);

assign icmp_ln628_fu_148_p2 = ((shl_ln_fu_134_p3 > or_ln20_fu_142_p2) ? 1'b1 : 1'b0);

assign lshr_ln368_fu_344_p2 = 64'd18446744073709551615 >> zext_ln368_2_fu_310_p1;

assign lshr_ln628_1_fu_226_p2 = 64'd18446744073709551615 >> zext_ln628_1_fu_216_p1;

assign lshr_ln628_fu_220_p2 = select_ln628_1_fu_190_p3 >> zext_ln628_fu_212_p1;

assign next_key_V_fu_248_p0 = encrypt_decrypt;

assign next_key_V_fu_248_p3 = ((next_key_V_fu_248_p0[0:0] == 1'b1) ? current_chunk_fu_238_p1 : ret_fu_242_p2);

assign or_ln20_fu_142_p2 = (shl_ln_fu_134_p3 | 6'd15);

assign p_Result_1_fu_374_p2 = (and_ln368_2_fu_368_p2 | and_ln368_1_fu_362_p2);

assign p_Result_s_fu_232_p2 = (lshr_ln628_fu_220_p2 & lshr_ln628_1_fu_226_p2);

assign ret_fu_242_p2 = (current_chunk_fu_238_p1 ^ ap_sig_allocacmp_rhs_V_load);

assign select_ln368_1_fu_280_p3 = ((icmp_ln368_fu_260_p2[0:0] == 1'b1) ? or_ln20_fu_142_p2 : shl_ln_fu_134_p3);

assign select_ln368_2_fu_288_p3 = ((icmp_ln368_fu_260_p2[0:0] == 1'b1) ? xor_ln368_fu_266_p2 : shl_ln_fu_134_p3);

assign select_ln368_3_fu_330_p3 = ((icmp_ln368_fu_260_p2[0:0] == 1'b1) ? tmp_2_fu_320_p4 : shl_ln368_fu_314_p2);

assign select_ln368_fu_272_p3 = ((icmp_ln368_fu_260_p2[0:0] == 1'b1) ? shl_ln_fu_134_p3 : or_ln20_fu_142_p2);

assign select_ln628_1_fu_190_p3 = ((icmp_ln628_fu_148_p2[0:0] == 1'b1) ? tmp_fu_154_p4 : message);

assign select_ln628_2_fu_198_p3 = ((icmp_ln628_fu_148_p2[0:0] == 1'b1) ? xor_ln628_fu_170_p2 : shl_ln_fu_134_p3);

assign select_ln628_fu_182_p3 = ((icmp_ln628_fu_148_p2[0:0] == 1'b1) ? sub_ln628_fu_164_p2 : sub_ln628_1_fu_176_p2);

assign sext_ln186_fu_256_p1 = ret_fu_242_p2;

assign shl_ln368_1_fu_338_p2 = 64'd18446744073709551615 << zext_ln368_1_fu_306_p1;

assign shl_ln368_fu_314_p2 = sext_ln186_fu_256_p1 << zext_ln368_fu_302_p1;

assign shl_ln_fu_134_p3 = {{trunc_ln20_fu_130_p1}, {4'd0}};

assign sub_ln628_1_fu_176_p2 = (or_ln20_fu_142_p2 - shl_ln_fu_134_p3);

assign sub_ln628_fu_164_p2 = (shl_ln_fu_134_p3 - or_ln20_fu_142_p2);

integer ap_tvar_int_0;

always @ (shl_ln368_fu_314_p2) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_2_fu_320_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_320_p4[ap_tvar_int_0] = shl_ln368_fu_314_p2[63 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (message) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            tmp_fu_154_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_fu_154_p4[ap_tvar_int_1] = message[63 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln20_fu_130_p1 = ap_sig_allocacmp_i_1[1:0];

assign xor_ln368_1_fu_296_p2 = (select_ln368_fu_272_p3 ^ 6'd63);

assign xor_ln368_2_fu_356_p2 = (64'd18446744073709551615 ^ and_ln368_fu_350_p2);

assign xor_ln368_fu_266_p2 = (shl_ln_fu_134_p3 ^ 6'd63);

assign xor_ln628_1_fu_206_p2 = (select_ln628_fu_182_p3 ^ 6'd63);

assign xor_ln628_fu_170_p2 = (shl_ln_fu_134_p3 ^ 6'd63);

assign zext_ln368_1_fu_306_p1 = select_ln368_1_fu_280_p3;

assign zext_ln368_2_fu_310_p1 = xor_ln368_1_fu_296_p2;

assign zext_ln368_fu_302_p1 = select_ln368_2_fu_288_p3;

assign zext_ln628_1_fu_216_p1 = xor_ln628_1_fu_206_p2;

assign zext_ln628_fu_212_p1 = select_ln628_2_fu_198_p3;

endmodule //crypt_message
