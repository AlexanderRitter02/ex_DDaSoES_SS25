-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypt_message is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    encrypt_decrypt : IN STD_LOGIC;
    message : IN STD_LOGIC_VECTOR (63 downto 0);
    key : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of crypt_message is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypt_message_crypt_message,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.785500,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=85,HLS_SYN_LUT=1654,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln18_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal rhs_V_fu_64 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_key_V_fu_248_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_rhs_V_load : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_68 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_p_Val2_load_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_p_Val2_load : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_72 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_fu_118_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln20_fu_130_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_134_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln20_fu_142_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln628_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln628_fu_164_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln628_1_fu_176_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_154_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln628_fu_170_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_fu_182_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_2_fu_198_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln628_1_fu_206_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_1_fu_190_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln628_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln628_1_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln628_fu_220_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln628_1_fu_226_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal current_chunk_fu_238_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_key_V_fu_248_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_fu_242_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln368_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln368_fu_266_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln368_fu_272_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln368_2_fu_288_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln368_1_fu_280_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln368_1_fu_296_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln186_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln368_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln368_fu_314_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_320_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln368_1_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln368_2_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln368_1_fu_338_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln368_fu_344_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln368_fu_350_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln368_2_fu_356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln368_3_fu_330_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln368_1_fu_362_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln368_2_fu_368_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component crypt_message_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component crypt_message_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln18_fu_112_p2 = ap_const_lv1_0)) then 
                    i_fu_72 <= i_2_fu_118_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln18_fu_112_p2 = ap_const_lv1_0)) then 
                    p_Val2_s_fu_68 <= p_Result_1_fu_374_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_68 <= ap_const_lv64_0;
                end if;
            end if; 
        end if;
    end process;

    rhs_V_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln18_fu_112_p2 = ap_const_lv1_0)) then 
                    rhs_V_fu_64 <= next_key_V_fu_248_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    rhs_V_fu_64 <= key;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln368_1_fu_362_p2 <= (xor_ln368_2_fu_356_p2 and ap_sig_allocacmp_p_Val2_load_1);
    and_ln368_2_fu_368_p2 <= (select_ln368_3_fu_330_p3 and and_ln368_fu_350_p2);
    and_ln368_fu_350_p2 <= (shl_ln368_1_fu_338_p2 and lshr_ln368_fu_344_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln18_fu_112_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln18_fu_112_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_sig_allocacmp_p_Val2_load;

    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_72)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_p_Val2_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, p_Val2_s_fu_68)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_p_Val2_load <= ap_const_lv64_0;
        else 
            ap_sig_allocacmp_p_Val2_load <= p_Val2_s_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_p_Val2_load_1_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, p_Val2_s_fu_68)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_p_Val2_load_1 <= ap_const_lv64_0;
        else 
            ap_sig_allocacmp_p_Val2_load_1 <= p_Val2_s_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_rhs_V_load_assign_proc : process(ap_CS_fsm_state1, key, rhs_V_fu_64, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_rhs_V_load <= key;
        else 
            ap_sig_allocacmp_rhs_V_load <= rhs_V_fu_64;
        end if; 
    end process;

    current_chunk_fu_238_p1 <= p_Result_s_fu_232_p2(16 - 1 downto 0);
    i_2_fu_118_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    icmp_ln18_fu_112_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_4) else "0";
    icmp_ln368_fu_260_p2 <= "1" when (unsigned(shl_ln_fu_134_p3) > unsigned(or_ln20_fu_142_p2)) else "0";
    icmp_ln628_fu_148_p2 <= "1" when (unsigned(shl_ln_fu_134_p3) > unsigned(or_ln20_fu_142_p2)) else "0";
    lshr_ln368_fu_344_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln368_2_fu_310_p1(31-1 downto 0)))));
    lshr_ln628_1_fu_226_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln628_1_fu_216_p1(31-1 downto 0)))));
    lshr_ln628_fu_220_p2 <= std_logic_vector(shift_right(unsigned(select_ln628_1_fu_190_p3),to_integer(unsigned('0' & zext_ln628_fu_212_p1(31-1 downto 0)))));
    next_key_V_fu_248_p0 <= (0=>encrypt_decrypt, others=>'-');
    next_key_V_fu_248_p3 <= 
        current_chunk_fu_238_p1 when (next_key_V_fu_248_p0(0) = '1') else 
        ret_fu_242_p2;
    or_ln20_fu_142_p2 <= (shl_ln_fu_134_p3 or ap_const_lv6_F);
    p_Result_1_fu_374_p2 <= (and_ln368_2_fu_368_p2 or and_ln368_1_fu_362_p2);
    p_Result_s_fu_232_p2 <= (lshr_ln628_fu_220_p2 and lshr_ln628_1_fu_226_p2);
    ret_fu_242_p2 <= (current_chunk_fu_238_p1 xor ap_sig_allocacmp_rhs_V_load);
    select_ln368_1_fu_280_p3 <= 
        or_ln20_fu_142_p2 when (icmp_ln368_fu_260_p2(0) = '1') else 
        shl_ln_fu_134_p3;
    select_ln368_2_fu_288_p3 <= 
        xor_ln368_fu_266_p2 when (icmp_ln368_fu_260_p2(0) = '1') else 
        shl_ln_fu_134_p3;
    select_ln368_3_fu_330_p3 <= 
        tmp_2_fu_320_p4 when (icmp_ln368_fu_260_p2(0) = '1') else 
        shl_ln368_fu_314_p2;
    select_ln368_fu_272_p3 <= 
        shl_ln_fu_134_p3 when (icmp_ln368_fu_260_p2(0) = '1') else 
        or_ln20_fu_142_p2;
    select_ln628_1_fu_190_p3 <= 
        tmp_fu_154_p4 when (icmp_ln628_fu_148_p2(0) = '1') else 
        message;
    select_ln628_2_fu_198_p3 <= 
        xor_ln628_fu_170_p2 when (icmp_ln628_fu_148_p2(0) = '1') else 
        shl_ln_fu_134_p3;
    select_ln628_fu_182_p3 <= 
        sub_ln628_fu_164_p2 when (icmp_ln628_fu_148_p2(0) = '1') else 
        sub_ln628_1_fu_176_p2;
        sext_ln186_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_fu_242_p2),64));

    shl_ln368_1_fu_338_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln368_1_fu_306_p1(31-1 downto 0)))));
    shl_ln368_fu_314_p2 <= std_logic_vector(shift_left(unsigned(sext_ln186_fu_256_p1),to_integer(unsigned('0' & zext_ln368_fu_302_p1(31-1 downto 0)))));
    shl_ln_fu_134_p3 <= (trunc_ln20_fu_130_p1 & ap_const_lv4_0);
    sub_ln628_1_fu_176_p2 <= std_logic_vector(unsigned(or_ln20_fu_142_p2) - unsigned(shl_ln_fu_134_p3));
    sub_ln628_fu_164_p2 <= std_logic_vector(unsigned(shl_ln_fu_134_p3) - unsigned(or_ln20_fu_142_p2));
    
    tmp_2_fu_320_p4_proc : process(shl_ln368_fu_314_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_2_fu_320_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := shl_ln368_fu_314_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_2_fu_320_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_2_fu_320_p4_i) := shl_ln368_fu_314_p2(64-1-tmp_2_fu_320_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_320_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_fu_154_p4_proc : process(message)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_fu_154_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := message;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_fu_154_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_fu_154_p4_i) := message(64-1-tmp_fu_154_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_154_p4 <= resvalue(64-1 downto 0);
    end process;

    trunc_ln20_fu_130_p1 <= ap_sig_allocacmp_i_1(2 - 1 downto 0);
    xor_ln368_1_fu_296_p2 <= (select_ln368_fu_272_p3 xor ap_const_lv6_3F);
    xor_ln368_2_fu_356_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor and_ln368_fu_350_p2);
    xor_ln368_fu_266_p2 <= (shl_ln_fu_134_p3 xor ap_const_lv6_3F);
    xor_ln628_1_fu_206_p2 <= (select_ln628_fu_182_p3 xor ap_const_lv6_3F);
    xor_ln628_fu_170_p2 <= (shl_ln_fu_134_p3 xor ap_const_lv6_3F);
    zext_ln368_1_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_1_fu_280_p3),64));
    zext_ln368_2_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln368_1_fu_296_p2),64));
    zext_ln368_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_2_fu_288_p3),64));
    zext_ln628_1_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_1_fu_206_p2),64));
    zext_ln628_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln628_2_fu_198_p3),64));
end behav;
